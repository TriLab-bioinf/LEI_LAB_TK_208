---
title: "TK_208: Virtual 4C analysis"
author: "Hernan Lorenzi"
format: html
echo: false
warning: false
---

## Project goals:

1. Perform genome-wide virtual 4C analysis of different HiC datasets using SuHw gene (Dme6 = 3R:14,304,455..14,308,589 [-]) as bait.
2. Investigate the presence of discarded HiC reads containing hits to SuHw gene and then determine if SuHw unmatched portions of reads hit anything else in the Dm genome (e.g. repetitive sequences).

#### Notes:
- Using Dm6.52 as the reference genome and annotation.
- Only main chromosomes were included.
- Closest DpnII sites to gene boundaries are 3R:14,304,362-14,308,801
- Closest bins to SuHw boundaries are  


```{r}
WD <- "/gpfs/gsfs12/users/lorenziha/ELISSA_LEI/TK_208"


# Load required packages
pacman::p_load(tidyverse, GenomicFeatures, txdbmaker, plotgardener, org.Dm.eg.db, TxDb.Dmelanogaster.UCSC.dm6.ensGene, BSgenome.Dmelanogaster.UCSC.dm6, AnnotationDbi, HiContacts, conflicted)

# Fix function conflicts 
conflicts_prefer(plotgardener::c)
conflicts_prefer(dplyr::rename)
conflicts_prefer(dplyr::select)
conflicts_prefer(base::as.data.frame)
conflicts_prefer(dplyr::filter)
conflicts_prefer(GenomicRanges::reduce)

# Create Dm6 assembly for plotgardener
Dm6 <- assembly(
    Genome = "Dm6",
    TxDb = "TxDb.Dmelanogaster.UCSC.dm6.ensGene",
    OrgDb = "org.Dm.eg.db",
    BSgenome = "BSgenome.Dmelanogaster.UCSC.dm6", 
    gene.id.column = "FLYBASE",
    display.column = "SYMBOL"
)     

# Load HICCUP loop identification tables
hiccup_files <- list()
# samples <- c("mock_1", "mock_2", "Kc167_NT_rep1", "Kc167_NT_rep2",
#              "Kc167_NT_rep3","Kc167_NT_rep4","HiC_NT_rep1-4_merged")

samples <- c("mock_1", "mock_2", "HiC_NT_rep1-4_merged")
hicupps_loop_dir <- "inter_30_loops_1K_5K_10K_25K"

resolutions <- c(1000, 5000, 10000, 25000)
for (s in samples) {
  for (resolution in resolutions) {
    my_key <- paste0(s,":",resolution)
    hiccup_file <- list.files(path = paste(WD,"juicer_results",s,"aligned",hicupps_loop_dir,sep = "/"),
                              pattern = paste0("postprocessed_pixels_",resolution,".bedpe"), 
                              full.names = TRUE, , recursive = TRUE)
    hiccup_files[[my_key]] <- read_tsv(file = hiccup_file, col_names = TRUE, trim_ws = TRUE)[-1,] |>
                          rename("chr1"="#chr1")
    hiccup_files[[my_key]] <- hiccup_files[[my_key]][-1,] |> 
      mutate(chr1 = paste0("chr",chr1)) |> 
      mutate(chr2 = paste0("chr",chr2))
  }
}
```

# Import ChIRP data from Irene
```{r}
SuHw_ChIRP_concensus_file <- paste(WD,"data/bed_files/SuHw_ChIRP_concensus.bed", sep = "/")
GSE200993_Mock_SuHw.overlap_file <- paste(WD, "data/bed_files/GSE200993_Mock_SuHw.overlap.bed", sep = "/")

SuHw_ChIRP_conc.df <- read_tsv(file = SuHw_ChIRP_concensus_file, col_names = FALSE)
GSE200993_Mock_SuHw.overlap.df <- read_tsv(file = GSE200993_Mock_SuHw.overlap_file, col_names = FALSE)

# Add fake signal column and strand as '.'
SuHw_ChIRP_conc.df <- SuHw_ChIRP_conc.df |> mutate (score = 10, strand = '.')
GSE200993_Mock_SuHw.overlap.df <- GSE200993_Mock_SuHw.overlap.df |> mutate (score = 10, strand = '.')

# make Granges
SuHw_ChIRP_conc.gr <- GRanges(seqnames = Rle(values = SuHw_ChIRP_conc.df$X1), ranges = IRanges(start = SuHw_ChIRP_conc.df$X2, end =  SuHw_ChIRP_conc.df$X3))


GSE200993_Mock_SuHw.overlap.gr <- GRanges(seqnames = Rle(values =  GSE200993_Mock_SuHw.overlap.df$X1), ranges = IRanges(start = GSE200993_Mock_SuHw.overlap.df$X2 ,end =  GSE200993_Mock_SuHw.overlap.df$X3))

```

# Import ChIRP data peak intensities from Irene
```{r}

Pool_even_file <- paste(WD,"data/bed_files/pool_even_peak_intensity_all_reps.tsv", sep = "/")
Pool_odd_file <- paste(WD,"data/bed_files/pool_odd_peak_intensity_all_reps.tsv", sep = "/")
Pool3_file <- paste(WD,"data/bed_files/pool3_peak_intensity_all_reps.tsv", sep = "/")
Pool4_file <- paste(WD,"data/bed_files/pool4_peak_intensity_all_reps.tsv", sep = "/")

# Load pool peak files
Pool_even.df <- read_tsv(file = Pool_even_file, col_names = TRUE)
Pool_odd.df <- read_tsv(file = Pool_odd_file, col_names = TRUE)
Pool3.df <- read_tsv(file = Pool3_file, col_names = TRUE)
Pool4.df <- read_tsv(file = Pool4_file, col_names = TRUE)

# Reformat pool peaks as bed. files
Pool_even.df <- Pool_even.df |> rename("score"="average_intensity") |> mutate("strand"=".") |> select(c(chr, start, end, score, strand))
Pool_odd.df <- Pool_odd.df |> rename("score"="average_intensity") |> mutate("strand"=".") |> select(c(chr, start, end, score, strand))
Pool3.df <- Pool3.df |> rename("score"="average_intensity") |> mutate("strand"=".") |> select(c(chr, start, end, score, strand))
Pool4.df <- Pool4.df |> rename("score"="average_intensity") |> mutate("strand"=".") |> select(c(chr, start, end, score, strand))

# Convert to Granges object
Pool_even.gr <- GRanges(seqnames = Rle(values = Pool_even.df$chr), ranges = IRanges(start = Pool_even.df$start, end =  Pool_even.df$end, intensity = Pool_even.df$score))
Pool_odd.gr <- GRanges(seqnames = Rle(values = Pool_odd.df$chr), ranges = IRanges(start = Pool_odd.df$start, end =  Pool_odd.df$end, intensity = Pool_odd.df$score))
Pool3.gr <- GRanges(seqnames = Rle(values = Pool3.df$chr), ranges = IRanges(start = Pool3.df$start, end =  Pool3.df$end, intensity = Pool3.df$score))
Pool4.gr <- GRanges(seqnames = Rle(values = Pool4.df$chr), ranges = IRanges(start = Pool4.df$start, end =  Pool4.df$end, intensity = Pool4.df$score))
```

# Make plots

```{r}

dir.create(path = paste0(WD,"/R/render/virtual-4C-analysis_files/Tables"), recursive = TRUE, showWarnings = FALSE)

source("/gpfs/gsfs12/users/lorenziha/ELISSA_LEI/TK_208/R/scripts/plots_virtual4C.R")

for (sample in samples){
  print(paste("Sample_ID =",sample))
  
  my_bedpe <- plot_virtual_4C(s = sample, my_hiccup_files = hiccup_files, resolution = 1000)
  if( !is.null(my_bedpe) ){
    write_csv(x = my_bedpe, file = paste0(WD,"/R/render/virtual-4C-analysis_files/Tables/virtual4C-",sample,"-1Kb.csv"))
  }
  
  my_bedpe <- plot_virtual_4C(s = sample, my_hiccup_files = hiccup_files, resolution = 5000)
  if( !is.null(my_bedpe) ){
    write_csv(x = my_bedpe, file = paste0(WD,"/R/render/virtual-4C-analysis_files/Tables/virtual4C-",sample,"-5Kb.csv"))
  }
  
  my_bedpe <- plot_virtual_4C(s = sample, my_hiccup_files = hiccup_files, resolution = 10000)
  if( !is.null(my_bedpe) ){
    write_csv(x = my_bedpe, file = paste0(WD,"/R/render/virtual-4C-analysis_files/Tables/virtual4C-",sample,"-10Kb.csv"))
  }
  
  my_bedpe <- plot_virtual_4C(s = sample, my_hiccup_files = hiccup_files, resolution = 25000)
  if( !is.null(my_bedpe) ){
    write_csv(x = my_bedpe, file = paste0(WD,"/R/render/virtual-4C-analysis_files/Tables/virtual4C-",sample,"-25Kb.csv"))
  }
}

```

